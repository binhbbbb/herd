\ Test app dear chap
require Core
require Vaadin
require Record
require List
  
\ Filter attribs
record Filter
 name beginYear endYear beginDuration endDuration genres
endrecord

\ Movie attributes
record Movie
 id name duration prodyear genres
endrecord

\ A table for movies
var movie-table

: set-table-headers
  list[ "name" | "duration" | "prodyear" | "genres" ]-is-used-by
    movie-table @ as-visible-columns
  list[ "Name" | "Duration" | "Production year" | "Genres" ]-is-used-by
    movie-table @ as-column-names
;

\ Attach '%' to the beginning and end of a string
: wildcard
  "%" cat "%" swap cat
;

\ Form field listeners
: setNameFilter Filter.name ! ;
: setDurationBegin str-to-int Filter.beginDuration ! ;
: setDurationEnd str-to-int Filter.endDuration ! ;
: setProdYearBegin str-to-int Filter.beginYear ! ;
: setProdYearEnd str-to-int Filter.endYear ! ;
: setGenresFilter "name" prop wildcard  Filter.genres ! ;

\ This stuff is for the window
: setName Movie.name ! ;
: setDuration str-to-int Movie.duration ! ;
: setProdYear str-to-int Movie.prodyear ! ;
: setGenres Movie.genres ! ;

: filterList
  use list[ Filter.name @ | Filter.beginYear @ | 
    Filter.endYear @ | Filter.beginDuration @ |
  Filter.endDuration @ | Filter.genres @ ]-as-params-for-query
  "SELECT id, name, duration, prodyear, genres FROM movie WHERE "
  "name like ? OR (prodyear >= ? AND prodYear <= ?) OR (duration >= ? AND "
  " duration <= ?) OR genres like ?" cat cat to create-a-filtered-SQL-container
  movie-table uses-it as-container-datasource
  set-table-headers
;

: fillMovieList
  use "SELECT id, name, duration, prodyear, genres FROM movie"
  to create-a-SQL-container
  movie-table uses-it as-container-datasource
  set-table-headers
;

: addMovie
  use list[ Movie.name @ | Movie.prodyear @ | Movie.duration @ |
    Movie.genres @ ]-as-params-for-query
  "INSERT INTO movie VALUES (?,?,?,?, NULL)" do-query
  fillMovieList
;

var genreTextField
var genreComboBox

: makeGenreContainer
   use "SELECT name FROM genre" to create-a-SQL-container
;

: fillGenreComboBox
   makeGenreContainer genreComboBox @ swap as-container-datasource
;

: newGenre
  use list[ from-stack ]-as-params-for-query "INSERT INTO genre VALUES (NULL, ?)" 
  do-query
  fillGenreComboBox
;

\ TODO this can be optimized
: genreSelected
   "name" prop nip
   genreTextField @ get-value nip  " " cat
   swap cat
   genreTextField @ swap set-value
   drop
;

\ a combobox for genres
"Choose a genre" is a-combo-box listened-by newGenre and genreSelected
genreComboBox as-name


: showEditWindow
  a-window with "Edit movie" as-caption "40em" as-width contains:
    [ "Name" is aTextField listenedBy setName , ] Movie.name @ asValue 
    "30em" as-width
    add-it
    [ "Production year" is a-text-field listened-by setProdYear , ]
    Movie.prodyear @ as-value "5em" as-width
    add-it
    [ "Duration" is a-text-field listened-by setDuration , ] Movie.duration @ as-value
    "5em" as-width
    add-it
 
    [ "Genres" is aTextField listenedBy setGenres , ] Movie.genres @ as-value
    "30em" asWidth genreTextField as-name
    genreTextField @ addIt
    fillGenreComboBox
    genreComboBox @ addIt
    "Add movie" is aButton with "addMovie" asClickListener
    add-it

  add-window
;

: deleteSelection
  use list[ Movie.id @ ]as-params-for-query "DELETE FROM movie WHERE id = ?" do-query
  fillMovieList
;

\ This listener gets the properties of the selected movie
: movieSelected
  list[ "id" | "name" | "duration" | "prodyear" | "genres" ]load-props-to Movie
;


\ Fill main panel with components
mainPanel contains:

  "name" is a-text-field listened-by setNameFilter pack
  a new-hl
    "Duration begin" is a-text-field listened-by setDurationBegin pack
    "Duration end" is a-text-field listened-by setDurationEnd pack
  pack
  a new-hl
    "Prod. year begin" is a-text-field listened-by setProdYearBegin pack
    "Prod. year end" is a-text-field listened-by setProdYearEnd pack
  pack
  
  "Genre" is a-select listened-by setGenresFilter dup
   makeGenreContainer as-container-datasource 
  pack

  "Filter list" is a-button with "filterList" as-click-listener pack

  ( Create movie table and fill with content from DB )
  "Movies" is a-table listened-by movieSelected with movieTable as-name
  movieTable @ pack
  fillMovieList

  a new-hl
   "Delete" is a-button with "deleteSelection" as-clicklistener pack
   "Edit selection" is aButton with "showEditWindow" asClickListener pack
   "Add New Movie" is aButton with "showEditWindow" asClickListener pack
  pack

drop
 